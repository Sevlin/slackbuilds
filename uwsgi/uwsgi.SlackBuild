#!/bin/bash

# Slackware build script for uwsgi

# Copyright 2012-2014 Audrius Ka≈æukauskas <audrius@neutrino.lt>
# Copyright 2016-2018 Mykyta Solomko <sev@nix.org.ua>, Kyiv, Ukraine
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

PRGNAM="uwsgi"
VERSION=${VERSION:-"2.0.17"}
BUILD=${BUILD:-1}
TAG=${TAG:-"sev"}

if [ -z "${ARCH}" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i486 ;;
    arm*) ARCH=arm  ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

CWD="$(pwd)"
TMP=${TMP:-"/tmp/build/${ARCH}"}
PKG="${TMP}/package-${PRGNAM}"
OUTPUT=${OUTPUT:-"/tmp"}

if [ "${ARCH}" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "${ARCH}" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "${ARCH}" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

# Build Python 2.x plugin.
UWSGI_ENABLE_PYTHON=${UWSGI_ENABLE_PYTHON:-"yes"}

# Set this to "yes" if you want to build a plugin for Python 3.x.  Requires
# python3 to be installed.
UWSGI_ENABLE_PYTHON3=${UWSGI_ENABLE_PYTHON3:-"no"}

# Build Perl plugin.
UWSGI_ENABLE_PSGI=${UWSGI_ENABLE_PSGI:-"yes"}

# Build Ruby plugin.
UWSGI_ENABLE_RUBY=${UWSGI_ENABLE_RUBY:-"yes"}

# Build PHP plugin.
UWSGI_ENABLE_PHP=${UWSGI_ENABLE_PHP:-"no"}

# Build Lua plugin.
UWSGI_ENABLE_LUA=${UWSGI_ENABLE_LUA:-"no"}

# Build V8 plugin.
UWSGI_ENABLE_V8=${UWSGI_ENABLE_V8:-"no"}

set -eu

rm -rf "${PKG}"
mkdir -p "${TMP}" "${PKG}" "${OUTPUT}"
cd "${TMP}"
rm -rf "${PRGNAM}-${VERSION}"
tar xvf "${CWD}/${PRGNAM}-${VERSION}.tar".?z*
cd "${PRGNAM}-${VERSION}"
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 -o -perm 511 \) \
 -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
 -exec chmod 644 {} \;

# Create build config file.
cat > "buildconf/uwsgi-base.ini" <<EOF
[uwsgi]
inherit = base
plugin_dir = /usr/lib${LIBDIRSUFFIX}/uwsgi-${VERSION}
embedded_plugins = null
EOF

# Build uWSGI core.
CFLAGS="${SLKCFLAGS}" \
python uwsgiconfig.py --build uwsgi-base
install -D -m 0755 uwsgi "${PKG}/usr/bin/uwsgi"

# Create directories
mkdir -p "${PKG}/usr/lib${LIBDIRSUFFIX}/uwsgi-${VERSION}" \
         "${PKG}/etc/rc.d" \
         "${PKG}/etc/uwsgi/vassals" \
         "${PKG}/var/run/uwsgi" \
         "${PKG}/etc/logrotate.d" \
         "${PKG}/var/log/uwsgi"

# Change the path, so that plugins would be placed inside ${PKG}.
sed "s|= /usr|= ${PKG}/usr|" buildconf/uwsgi-base.ini > buildconf/base-plugins.ini

# List of plugins to build.
PLUGINS="cache ping rpc corerouter fastrouter http ugreen signal syslog"

# Build plugins.
for PLUGIN in ${PLUGINS} ; do
  CFLAGS="${SLKCFLAGS}" \
  python uwsgiconfig.py --plugin "plugins/${PLUGIN}" "base-plugins"
done

# Use python3 to build plugin for it.
if [ "${UWSGI_ENABLE_PYTHON3}" = "yes" ]; then
  CFLAGS="${SLKCFLAGS}" \
  python3 uwsgiconfig.py --plugin plugins/python base-plugins python3
fi

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

# Install config, rc-script and logrotate rule
cat "${CWD}/uwsgi.ini" > "${PKG}/etc/uwsgi/uwsgi.ini.new"
cat "${CWD}/rc.uwsgi" > "${PKG}/etc/rc.d/rc.uwsgi.new"
cat "${CWD}/uwsgi.logrotate" > "${PKG}/etc/logrotate.d/uwsgi.new"

mkdir -p "${PKG}/usr/doc/${PRGNAM}-${VERSION}"
cp -a LICENSE README "${PKG}/usr/doc/${PRGNAM}-${VERSION}"
cat "${CWD}/${PRGNAM}.SlackBuild" > "${PKG}/usr/doc/${PRGNAM}-${VERSION}/${PRGNAM}.SlackBuild"

# Installation scripts
mkdir -p "${PKG}/install"

# Add post-installation script
cat "${CWD}/doinst.sh" > "${PKG}/install/doinst.sh"

# Add slack-desc
cat > "${PKG}/install/slack-desc" << EOF
     |-----handy-ruler------------------------------------------------------|
uwsgi: uwsgi (fast web application server)
uwsgi:
uwsgi: uWSGI is a fast, self-healing, developer/sysadmin-friendly application
uwsgi: server coded in pure C.  Born as a WSGI-only server, over time it has
uwsgi: evolved in a complete stack for networked/clustered web applications,
uwsgi: implementing message/object passing, caching, RPC and process
uwsgi: management.  It is designed to be fully modular.
uwsgi:
uwsgi: Homepage: https://uwsgi-docs.readthedocs.org/
uwsgi:
uwsgi:
EOF

# Add deps info into package
echo "attr,libcap,xz,zlib,libxml2,openssl-solibs|openssl,pcre,util-linux" > "${PKG}/install/slack-required"

pushd "${PKG}"
    /sbin/makepkg -l y -c n "${OUTPUT}/${PRGNAM}-${VERSION}-${ARCH}-${BUILD}${TAG}.${PKGTYPE:-txz}"
popd

##################
# Python plug-in #
##################
if [ "${UWSGI_ENABLE_PYTHON}" = 'yes' ]; then
    PKG_PYTHON="${TMP}/package-${PRGNAM}-python"
    rm -rf "${PKG_PYTHON}"
    mkdir -p "${PKG_PYTHON}"

    # Change the path, so that plugins would be placed inside ${PKG_PYTHON}.
    sed "s|= /usr|= ${PKG_PYTHON}/usr|" buildconf/uwsgi-base.ini > buildconf/python-plugin.ini

    # Create plugin directory
    mkdir -p "${PKG_PYTHON}/usr/lib${LIBDIRSUFFIX}/uwsgi-${VERSION}"

    # Build the plugin
    python uwsgiconfig.py --plugin "plugins/python" "python-plugin"

    # Strip binaries
    find ${PKG_PYTHON} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
      | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

    # Installation scripts
    mkdir -p "${PKG_PYTHON}/install"

    # Add slack-desc
    cat > "${PKG_PYTHON}/install/slack-desc" << EOF
            |-----handy-ruler------------------------------------------------------|
uwsgi-python: uwsgi-python (Python plug-in for uWSGI)
uwsgi-python:
uwsgi-python: This plug-in provides Python bindings for uWSGI.
uwsgi-python:
uwsgi-python: Homepage: https://uwsgi-docs.readthedocs.org/
uwsgi-python:
uwsgi-python:
uwsgi-python:
uwsgi-python:
uwsgi-python:
uwsgi-python:
EOF

    # Add deps
    echo "uwsgi,python" > "${PKG_PYTHON}/install/slack-required"

    # Build package
    pushd "${PKG_PYTHON}"
        /sbin/makepkg -l y -c n "${OUTPUT}/${PRGNAM}-python-${VERSION}-${ARCH}-${BUILD}${TAG}.${PKGTYPE:-txz}"
    popd
fi

################
# Perl plug-in #
################
if [ "${UWSGI_ENABLE_PSGI}" = 'yes' ]; then
    PKG_PSGI="${TMP}/package-${PRGNAM}-psgi"
    rm -rf "${PKG_PSGI}"
    mkdir -p "${PKG_PSGI}"

    # Change the path, so that plugins would be placed inside ${PKG_PSGI}.
    sed "s|= /usr|= ${PKG_PSGI}/usr|" buildconf/uwsgi-base.ini > buildconf/psgi-plugin.ini

    # Create plugin directory
    mkdir -p "${PKG_PSGI}/usr/lib${LIBDIRSUFFIX}/uwsgi-${VERSION}"

    # Build the plugin
    python uwsgiconfig.py --plugin "plugins/psgi" "psgi-plugin"

    # Strip binaries
    find ${PKG_PSGI} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
      | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

    # Installation scripts
    mkdir -p "${PKG_PSGI}/install"

    # Add slack-desc
    cat > "${PKG_PSGI}/install/slack-desc" << EOF
          |-----handy-ruler------------------------------------------------------|
uwsgi-psgi: uwsgi-psgi (Perl plug-in for uWSGI)
uwsgi-psgi:
uwsgi-psgi: This plug-in provides Perl bindings for uWSGI.
uwsgi-psgi:
uwsgi-psgi: Homepage: https://uwsgi-docs.readthedocs.org/
uwsgi-psgi:
uwsgi-psgi:
uwsgi-psgi:
uwsgi-psgi:
uwsgi-psgi:
uwsgi-psgi:
EOF

    # Add deps
    echo "uwsgi,perl" > "${PKG_PSGI}/install/slack-required"

    # Build package
    pushd "${PKG_PSGI}"
        /sbin/makepkg -l y -c n "${OUTPUT}/${PRGNAM}-psgi-${VERSION}-${ARCH}-${BUILD}${TAG}.${PKGTYPE:-txz}"
    popd
fi

################
# Ruby plug-in #
################
if [ "${UWSGI_ENABLE_RUBY}" = 'yes' ]; then
    PKG_RUBY="${TMP}/package-${PRGNAM}-ruby"
    rm -rf "${PKG_RUBY}"
    mkdir -p "${PKG_RUBY}"

    # Change the path, so that plugins would be placed inside ${PKG_RUBY}.
    sed "s|= /usr|= ${PKG_RUBY}/usr|" buildconf/uwsgi-base.ini > buildconf/ruby-plugin.ini

    # Create plugin directory
    mkdir -p "${PKG_RUBY}/usr/lib${LIBDIRSUFFIX}/uwsgi-${VERSION}"

    # Build the plugin
    python uwsgiconfig.py --plugin "plugins/rack"      "ruby-plugin"
    python uwsgiconfig.py --plugin "plugins/rbthreads" "ruby-plugin"
    python uwsgiconfig.py --plugin "plugins/fiber"     "ruby-plugin"

    # Strip binaries
    find ${PKG_RUBY} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
      | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

    # Installation scripts
    mkdir -p "${PKG_RUBY}/install"

    # Add slack-desc
    cat > "${PKG_RUBY}/install/slack-desc" << EOF
          |-----handy-ruler------------------------------------------------------|
uwsgi-ruby: uwsgi-ruby (Ruby plug-in for uWSGI)
uwsgi-ruby:
uwsgi-ruby: This plug-in provides Ruby bindings for uWSGI.
uwsgi-ruby:
uwsgi-ruby: Homepage: https://uwsgi-docs.readthedocs.org/
uwsgi-ruby:
uwsgi-ruby:
uwsgi-ruby:
uwsgi-ruby:
uwsgi-ruby:
uwsgi-ruby:
EOF

    # Add deps
    echo "uwsgi,ruby,gmp" > "${PKG_RUBY}/install/slack-required"

    # Build package
    pushd "${PKG_RUBY}"
        /sbin/makepkg -l y -c n "${OUTPUT}/${PRGNAM}-ruby-${VERSION}-${ARCH}-${BUILD}${TAG}.${PKGTYPE:-txz}"
    popd
fi

###############
# PHP plug-in #
###############
if [ "${UWSGI_ENABLE_PHP}" = 'yes' ]; then
    PKG_PHP="${TMP}/package-${PRGNAM}-php"
    rm -rf "${PKG_PHP}"
    mkdir -p "${PKG_PHP}"

    # Change the path, so that plugins would be placed inside ${PKG_PHP}.
    sed "s|= /usr|= ${PKG_PHP}/usr|" buildconf/uwsgi-base.ini > buildconf/php-plugin.ini

    # Create plugin directory
    mkdir -p "${PKG_PHP}/usr/lib${LIBDIRSUFFIX}/uwsgi-${VERSION}"

    # Build the plugin
    python uwsgiconfig.py --plugin "plugins/php" "php-plugin"

    # Strip binaries
    find ${PKG_PHP} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
      | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

    # Installation scripts
    mkdir -p "${PKG_PHP}/install"

    # Add slack-desc
    cat > "${PKG_PHP}/install/slack-desc" << EOF
         |-----handy-ruler------------------------------------------------------|
uwsgi-php: uwsgi-php (PHP plug-in for uWSGI)
uwsgi-php:
uwsgi-php: This plug-in provides PHP bindings for uWSGI.
uwsgi-php:
uwsgi-php: Homepage: https://uwsgi-docs.readthedocs.org/
uwsgi-php:
uwsgi-php:
uwsgi-php:
uwsgi-php:
uwsgi-php:
uwsgi-php:
EOF

    # Add deps
    echo "uwsgi,gcc,libtool,cxxlibs|gcc-g++,libmcrypt,php" > "${PKG_PHP}/install/slack-required"

    # Build package
    pushd "${PKG_PHP}"
        /sbin/makepkg -l y -c n "${OUTPUT}/${PRGNAM}-php-${VERSION}-${ARCH}-${BUILD}${TAG}.${PKGTYPE:-txz}"
    popd
fi


###############
# LUA plug-in #
###############
if [ "${UWSGI_ENABLE_LUA}" = 'yes' ]; then
    PKG_LUA="${TMP}/package-${PRGNAM}-lua"
    rm -rf "${PKG_LUA}"
    mkdir -p "${PKG_LUA}"

    # Change the path, so that plugins would be placed inside ${PKG_LUA}.
    sed "s|= /usr|= ${PKG_LUA}/usr|" buildconf/uwsgi-base.ini > buildconf/lua-plugin.ini

    # Create plugin directory
    mkdir -p "${PKG_LUA}/usr/lib${LIBDIRSUFFIX}/uwsgi-${VERSION}"

    # Build the plugin
    python uwsgiconfig.py --plugin "plugins/lua" "lua-plugin"

    # Strip binaries
    find ${PKG_LUA} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
      | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

    # Installation scripts
    mkdir -p "${PKG_LUA}/install"

    # Add slack-desc
    cat > "${PKG_LUA}/install/slack-desc" << EOF
         |-----handy-ruler------------------------------------------------------|
uwsgi-lua: uwsgi-lua (Lua plug-in for uWSGI)
uwsgi-lua:
uwsgi-lua: This plug-in provides Lua bindings for uWSGI.
uwsgi-lua:
uwsgi-lua: Homepage: https://uwsgi-docs.readthedocs.org/
uwsgi-lua:
uwsgi-lua:
uwsgi-lua:
uwsgi-lua:
uwsgi-lua:
uwsgi-lua:
EOF

    # Add deps
    echo "uwsgi,lua" > "${PKG_LUA}/install/slack-required"

    # Build package
    pushd "${PKG_LUA}"
        /sbin/makepkg -l y -c n "${OUTPUT}/${PRGNAM}-lua-${VERSION}-${ARCH}-${BUILD}${TAG}.${PKGTYPE:-txz}"
    popd
fi


