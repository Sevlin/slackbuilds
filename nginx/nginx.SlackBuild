#!/bin/bash

# Slackware build script for nginx

# Copyright 2008 Cherife Li <cherife-#-dotimes.com>
# Copyright 2011 Diogo Leal <diogo@diogoleal.com>
# Copyright 2012-13 Francisco Ambrozio <sbo@franciscoambrozio.com>
# Copyright 2014-2017 Larry Hajali <larryhaja[at]gmail[dot]com>
# All rights reserved.
#
# Modified By Mykyta Solomko
# Copyright 2015-2017 Mykyta Solomko <sev@nix.org.ua>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Special thanks to Thomas Morper for some configuration adjustments tips

PRGNAM=nginx
VERSION=${VERSION:-1.10.3}
BUILD=${BUILD:-1}
TAG=${TAG:-sev}
NUMJOBS=${NUMJOBS:-2}
NGINX_PKG_SUFFIX=${NGINX_PKG_SUFFIX:-}

if [ -z "${ARCH}" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/build/${ARCH}}
PKG=$TMP/package-${PRGNAM}
OUTPUT=${OUTPUT:-/tmp}

if [ "${ARCH}" = "i586" ]; then
   SLKCFLAGS="-O2 -march=i586 -mtune=i686"
   LIBDIRSUFFIX=""
elif [ "${ARCH}" = "i686" ]; then
   SLKCFLAGS="-O2 -march=i686 -mtune=i686"
   LIBDIRSUFFIX=""
elif [ "${ARCH}" = "x86_64" ]; then
   SLKCFLAGS="-O2 -fPIC"
   LIBDIRSUFFIX="64"
else
   SLKCFLAGS=""
   LIBDIRSUFFIX=""
fi

set -e

rm -rf "${PKG}"
mkdir -p "${TMP}" "${PKG}" "${OUTPUT}"
cd "${TMP}"
rm -rf "${PRGNAM}-${VERSION}"
tar xvf "${CWD}/${PRGNAM}-${VERSION}.tar.?z*"
cd "${PRGNAM}-${VERSION}"
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# Fix the nginx.conf file for html and virtual server directory.
sed -i \
    -e '/root[ ]*html/s|html;|/var/www/&|' \
    -e '$s|.*|    include /etc/nginx/conf.d/\*.conf;\n&|' "conf/${PRGNAM}.conf"

# Add if dynamic modules are used.
if [ "${NGINX_DYNAMIC:-no}" == "yes" ]; then
  DYNAMIC_MODULE="${DYNAMIC_MODULE:-=dynamic}"
  sed -i 's|^events.*|include /etc/nginx/modules/\*.conf;\n\n&|' "conf/${PRGNAM}.conf"
else
  DYNAMIC_MODULE=""
fi

NGINX_ADDMODULE=${NGINX_ADDMODULE:-}
NGINX_DEPS="pcre,xz,zlib,libgcrypt,libgpg-error,libxml2,libxslt,openssl-solibs|openssl,perl"

# Enable GeoIP support.
if [ "${NGINX_ENABLE_GEOIP:-no}" == "yes" ]; then
  GEOIP_MOD="--with-http_geoip_module${DYNAMIC_MODULE}"
  NGINX_DEPS="${NGINX_DEPS},GeoIP|geoip"
else
  GEOIP_MOD=""
fi

# Enable FancyIndex
if [ "${NGINX_ENABLE_FANCYINDEX:-no}" == "yes" ]; then
    :
fi

# Enable ModSecurity
if [ "${NGINX_ENABLE_MODSECURITY:-no}" == "yes" ]; then
    NGINX_DEPS="${NGINX_DEPS},db44,expat,ncurses,openldap-client,readline,apr,apr-util,cyrus-sasl,lua,sqlite,util-linux"
fi

# Enable RTMP
if [ "${NGINX_ENABLE_RTMP:-no}" == "yes" ]; then
    :
fi

# Add extra modules not included in nginx.
if [ ! -z "${NGINX_ADDMODULE}" ]; then

    if [ "${NGINX_DYNAMIC}" == "yes" ]; then
        ADD_MODULE="--modules-path=/usr/lib${LIBDIRSUFFIX}/${PRGNAM}/modules"
    fi

    for NGX_MODULE in ${NGINX_ADDMODULE[*]}; do
        if [ "${NGINX_DYNAMIC}" == "yes" ]; then
            ADD_MODULE="${ADD_MODULE} --add-dynamic-module=${NGX_MODULE}"
        else
            ADD_MODULE="${ADD_MODULE} --add-module=${NGX_MODULE}"
        fi
    done
fi

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --sbin-path=/usr/sbin/nginx \
  --conf-path=/etc/nginx/nginx.conf \
  --pid-path=/var/run/nginx.pid \
  --lock-path=/var/lock/subsys \
  --user="${NGINXUSER:=nobody}" \
  --group="${NGINXGROUP:=nogroup}" \
  --error-log-path=/var/log/nginx/error.log \
  --http-log-path=/var/log/nginx/access.log \
  --http-client-body-temp-path=/var/lib/nginx/client_body \
  --http-proxy-temp-path=/var/lib/nginx/proxy \
  --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \
  --http-uwsgi-temp-path=/var/lib/nginx/uwsgi \
  --http-scgi-temp-path=/var/lib/nginx/scgi \
  --with-file-aio \
  --with-ipv6 \
  --with-select_module \
  --with-poll_module \
  --with-http_ssl_module \
  --with-http_v2_module \
  --with-http_realip_module \
  --with-http_addition_module \
  --with-http_xslt_module${DYNAMIC_MODULE} \
  --with-http_image_filter_module${DYNAMIC_MODULE} \
  --with-http_sub_module \
  --with-http_dav_module \
  --with-http_flv_module \
  --with-http_mp4_module \
  --with-http_gunzip_module \
  --with-http_gzip_static_module \
  --with-http_random_index_module \
  --with-http_secure_link_module \
  --with-http_degradation_module \
  --with-http_slice_module \
  --with-http_stub_status_module \
  --with-http_perl_module${DYNAMIC_MODULE} \
  --with-http_auth_request_module \
  --with-mail${DYNAMIC_MODULE} \
  --with-mail_ssl_module \
  --with-stream${DYNAMIC_MODULE} \
  --with-stream_ssl_module \
  --with-pcre \
  --with-pcre-jit \
  --with-libatomic \
  ${GEOIP_MOD} \
  ${ADD_MODULE[*]}

make -j ${NUMJOBS}
make install \
  DESTDIR="${PKG}" \
  INSTALLDIRS=vendor \
  INSTALLVENDORMAN3DIR=/usr/man/man3

find "${PKG}" -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

mkdir -p "${PKG}/usr/man/man8"
install -m 0644 "objs/${PRGNAM}.8" "${PKG}/usr/man/man8"
find "${PKG}/usr/man" -type f -exec gzip -9 {} \;

find ${PKG} -name perllocal.pod \
  -o -name ".packlist" \
  -o -name "*.bs" \
  | xargs rm -f

find "${PKG}" -perm 444 -exec chmod 0644 {} \;
find "${PKG}" -perm 555 -exec chmod 0755 {} \;

# Make the temp path.
mkdir -p "${PKG}/var/lib/${PRGNAM}"
chmod 0700 "${PKG}/var/lib/${PRGNAM}"
chown "${NGINXUSER}" "${PKG}/var/lib/${PRGNAM}"

# Move html directory
mkdir -p "${PKG}/var/www"
mv "${PKG}/usr/html" "${PKG}/var/www"

# Add an init script
mkdir -p "${PKG}/etc/rc.d"
cat "${CWD}/rc.nginx" > "${PKG}/etc/rc.d/rc.nginx.new"

mkdir -p ${PKG}/etc/logrotate.d
sed -e "s,@USER@,${NGINXUSER}," \
    -e "s,@GROUP@,${NGINXGROUP}," \
    "${CWD}/nginx.logrotate" \
  > "${PKG}/etc/logrotate.d/nginx.new"

# Set the permissions for the log directory.
chown "${NGINXUSER}" "${PKG}/var/log/${PRGNAM}"
chmod 750 "${PKG}/var/log/${PRGNAM}"

# Create sub-directory for virtual servers.
mkdir "${PKG}/etc/${PRGNAM}/conf.d"

mkdir -p "${PKG}/usr/doc/nginx-${VERSION}"
cp -a CHANGES* LICENSE README "${PKG}/usr/doc/nginx-${VERSION}"
cat "${CWD}/nginx.SlackBuild" > "${PKG}/usr/doc/nginx-${VERSION}/nginx.SlackBuild"

mkdir -p "${PKG}/install"
cat "${CWD}/doinst.sh" > "${PKG}/install/doinst.sh"

# Add slack-desc
cat > "${PKG}/slack-desc" << EOF
                        |-----handy-ruler------------------------------------------------------|
nginx${NGINX_PKG_SUFFIX}: nginx (http/imap/pop3 proxy)
nginx${NGINX_PKG_SUFFIX}:
nginx${NGINX_PKG_SUFFIX}: Nginx [engine x] is a high-performance HTTP server and reverse proxy,
nginx${NGINX_PKG_SUFFIX}: as well as an IMAP/POP3 proxy server.
nginx${NGINX_PKG_SUFFIX}:
nginx${NGINX_PKG_SUFFIX}: Nginx was written by Igor Sysoev.
nginx${NGINX_PKG_SUFFIX}:
nginx${NGINX_PKG_SUFFIX}: Homepage: http://nginx.net/
nginx${NGINX_PKG_SUFFIX}:
nginx${NGINX_PKG_SUFFIX}:
nginx${NGINX_PKG_SUFFIX}:
EOF

# Add dependencies
echo "${NGINX_DEPS}" > "${PKG}/slack-required"

# Create modules directory and config files.
# Unfortunately, we have to use full paths rather then relative paths
# for nginx dynamic modules, or else we get the following error:
# $ sudo /usr/sbin/nginx -t
# nginx: [emerg] dlopen() "/usr/modules/ngx_stream_module.so" failed (/usr/modules/ngx_stream_module.so: cannot open shared object file: No such file or directory) in /etc/nginx/modules/mod-stream.conf:1
# nginx: configuration file /etc/nginx/nginx.conf test failed
# Source: https://trac.nginx.org/nginx/ticket/961
if [ "${NGINX_DYNAMIC}" == "yes" ]; then
  mkdir -p "${PKG}/etc/${PRGNAM}/modules"
  for module in ${PKG}/usr/lib${LIBDIRSUFFIX}/${PRGNAM}/modules/*; do
    MODULE_NAME=$(basename ${module} | sed 's|\.so||' | tr _ -)
    MODULE_DIR=$(dirname ${module} | sed "s|${PKG}||")
    echo "load_module \"${MODULE_DIR}/$(basename ${module})\";" > \
      "${PKG}/etc/${PRGNAM}/modules/${MODULE_NAME}.conf"
    echo "config etc/${PRGNAM}/modules/${MODULE_NAME}.conf.new" >> "${PKG}/install/doinst.sh"
  done
fi

# Don't clobber config files
for i in $(find "${PKG}/etc/${PRGNAM}" -type f ! -name "*\.default"); do
  mv "${i}" "${i}".new
done

cd ${PKG}
/sbin/makepkg -l y -c n "${OUTPUT}/${PRGNAM}${NGINX_PKG_SUFFIX}-${VERSION}-${ARCH}-${BUILD}${TAG}.${PKGTYPE:-txz}"

